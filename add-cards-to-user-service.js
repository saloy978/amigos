// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Supabase API —Å service role
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://nwtyjslkvwuxdfhlucgv.supabase.co';
// –ò—Å–ø–æ–ª—å–∑—É–µ–º anon key, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–æ–π—Ç–∏ RLS —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im53dHlqc2xrdnd1eGRmaGx1Y2d2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwNjQzMTksImV4cCI6MjA3MjY0MDMxOX0.2qlzaAfO8tDhRnz0idY51L8CQ8tlZzk7KIGPK1744FQ';

const supabase = createClient(supabaseUrl, supabaseKey);

async function addCardsToUser() {
  console.log('üîç –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏...');
  
  try {
    const userId = '7dd5dc5f-2e20-4107-8aee-302ad05772c2';
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    console.log('1. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...');
    const { data: cards, error: cardsError } = await supabase
      .from('cards')
      .select('id, term, translation')
      .in('id', [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]);
    
    if (cardsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', cardsError);
      return;
    }
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫:', cards.length);
    
    // 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –æ–¥–Ω–æ–π —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é add_card_to_user
    console.log('2. –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é...');
    let successCount = 0;
    let errorCount = 0;
    
    for (const card of cards) {
      try {
        const { data, error } = await supabase.rpc('add_card_to_user', {
          p_user_id: userId,
          p_language_pair_id: 'ru-es',
          p_term: card.term,
          p_translation: card.translation,
          p_image_url: null
        });
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ ${card.id}:`, error);
          errorCount++;
        } else {
          console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ ${card.id} –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${card.term} -> ${card.translation}`);
          successCount++;
        }
      } catch (err) {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${card.id}:`, err);
        errorCount++;
      }
    }
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const { data: userCardsResult, error: resultError } = await supabase
      .from('user_cards_with_content')
      .select('card_id, term, translation, progress, state, due_at')
      .eq('user_id', userId)
      .order('card_id');
    
    if (resultError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', resultError);
      return;
    }
    
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userCardsResult.length);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ cards_due_for_review
    console.log('4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ cards_due_for_review...');
    const { data: dueCards, error: dueError } = await supabase
      .from('cards_due_for_review')
      .select('card_id, term, translation, progress, due_at')
      .eq('user_id', userId);
    
    if (dueError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ cards_due_for_review:', dueError);
      return;
    }
    
    console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é:', dueCards.length);
    console.log('–ì–æ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', dueCards);
    
    console.log('üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
addCardsToUser();














