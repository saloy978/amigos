import React, { useState, useEffect } from 'react';
import { ArrowLeft, CheckCircle, Volume2, BookOpen, MessageSquare, Trophy, RotateCcw, Download, Target } from 'lucide-react';
import { lesson1Content, lesson1Games } from '../../context/lessons/lesson1';
import { GameItem, PluralGameItem, GameScore } from '../../types';
import { CardService } from '../../services/cardService';
import { useLessonProgress } from '../../hooks/useLessonProgress';
import { useTheoryTracking } from '../../hooks/useTheoryTracking';
import { useDialoguesTracking } from '../../hooks/useDialoguesTracking';
import { getLessonWords } from '../../context/lessons/words/index';

interface Lesson1ScreenProps {
  lessonId?: string;
  onBack: () => void;
  onUpdateProgress?: (progress: number) => void;
}

type GameType = 'gender' | 'plural' | 'sort' | 'findError';
type LessonSection = 'theory' | 'dialogues' | 'practice';

export const Lesson1Screen: React.FC<Lesson1ScreenProps> = ({ lessonId, onBack, onUpdateProgress }) => {
  const [activeSection, setActiveSection] = useState<LessonSection>('theory');
  const [currentGame, setCurrentGame] = useState<GameType>('gender');
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [scores, setScores] = useState<GameScore[]>([]);
  const [userAnswers, setUserAnswers] = useState<{ [key: number]: string }>({});
  const [showFeedback, setShowFeedback] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);
  const [gameCompleted, setGameCompleted] = useState(false);
  const [isAddingWords, setIsAddingWords] = useState(false);
  const [wordsAdded, setWordsAdded] = useState(false);
  const [addWordsMessage, setAddWordsMessage] = useState('');
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const {
    totalProgress,
    progressLoaded,
    markTheoryViewed,
    markDialoguesListened
  } = useLessonProgress(lessonId);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏
  useTheoryTracking({
    activeSection,
    theorySection: 'theory',
    onTheoryViewed: markTheoryViewed
  });

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
  useDialoguesTracking({
    onDialoguesListened: markDialoguesListened
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  useEffect(() => {
    if (onUpdateProgress && progressLoaded) {
      onUpdateProgress(totalProgress);
    }
  }, [totalProgress, onUpdateProgress, progressLoaded]);

  const getCurrentGameData = () => {
    switch (currentGame) {
      case 'gender':
        return lesson1Games.gender.items;
      case 'plural':
        return lesson1Games.plural.items;
      case 'sort':
        return lesson1Games.sort.items;
      case 'findError':
        return lesson1Games.findError.items;
      default:
        return [];
    }
  };

  const nextQuestion = () => {
    const gameData = getCurrentGameData();
    if (currentQuestion < gameData.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setShowFeedback(false);
      setIsCorrect(false);
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ
      const games: GameType[] = ['gender', 'plural', 'sort', 'findError'];
      const currentIndex = games.indexOf(currentGame);
      
      if (currentIndex < games.length - 1) {
        setCurrentGame(games[currentIndex + 1]);
        setCurrentQuestion(0);
        setShowFeedback(false);
        setIsCorrect(false);
      } else {
        // –í—Å–µ –∏–≥—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        setActiveSection('practice');
      }
    }
  };

  // Extract words from lesson content using dedicated words files
  const extractWordsFromLesson = () => {
    const words: Array<{ term: string; translation: string; english?: string }> = [];

    // Import lesson words dynamically based on lesson ID
    if (lessonId) {
      try {
        // Import words from dedicated lesson words file
        const lessonWords = getLessonWords(lessonId);
        words.push(...lessonWords);
        console.log(`üìö Loaded ${lessonWords.length} words for lesson: ${lessonId}`);
      } catch (error) {
        console.warn(`Failed to load words for lesson ${lessonId}:`, error);
        
        // Fallback: use hardcoded words (legacy method)
        const theoryWords = [
          { term: 'chico', translation: '–º–∞–ª—å—á–∏–∫' },
          { term: 'amigo', translation: '–¥—Ä—É–≥' },
          { term: 'hermano', translation: '–±—Ä–∞—Ç' },
          { term: 'libro', translation: '–∫–Ω–∏–≥–∞' },
          { term: 'alumno', translation: '—É—á–µ–Ω–∏–∫' },
          { term: 'museo', translation: '–º—É–∑–µ–π' },
          { term: 'chica', translation: '–¥–µ–≤–æ—á–∫–∞' },
          { term: 'amiga', translation: '–ø–æ–¥—Ä—É–≥–∞' },
          { term: 'hermana', translation: '—Å–µ—Å—Ç—Ä–∞' },
          { term: 'casa', translation: '–¥–æ–º' },
          { term: 'alumna', translation: '—É—á–µ–Ω–∏—Ü–∞' },
          { term: 'playa', translation: '–ø–ª—è–∂' },
          { term: 'pap√°', translation: '–ø–∞–ø–∞' },
          { term: 'd√≠a', translation: '–¥–µ–Ω—å' },
          { term: 'polic√≠a', translation: '–ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π' },
          { term: 'mano', translation: '—Ä—É–∫–∞' },
          { term: 'radio', translation: '—Ä–∞–¥–∏–æ' },
          { term: 'problema', translation: '–ø—Ä–æ–±–ª–µ–º–∞' },
          { term: 'programa', translation: '–ø—Ä–æ–≥—Ä–∞–º–º–∞' },
          { term: 'tema', translation: '—Ç–µ–º–∞' },
          { term: 'planeta', translation: '–ø–ª–∞–Ω–µ—Ç–∞' },
          { term: 'padre', translation: '–æ—Ç–µ—Ü' },
          { term: 'caf√©', translation: '–∫–æ—Ñ–µ' },
          { term: 'coche', translation: '–∞–≤—Ç–æ–º–æ–±–∏–ª—å' },
          { term: 'hombre', translation: '—á–µ–ª–æ–≤–µ–∫ / –º—É–∂—á–∏–Ω–∞' },
          { term: 'madre', translation: '–º–∞—Ç—å' },
          { term: 'calle', translation: '—É–ª–∏—Ü–∞' },
          { term: 'noche', translation: '–Ω–æ—á—å' },
          { term: 'tarde', translation: '–≤–µ—á–µ—Ä / –¥–µ–Ω—å' },
          { term: 'amor', translation: '–ª—é–±–æ–≤—å' },
          { term: 'sol', translation: '—Å–æ–ª–Ω—Ü–µ' },
          { term: 'avi√≥n', translation: '—Å–∞–º–æ–ª–µ—Ç' },
          { term: 'l√°piz', translation: '–∫–∞—Ä–∞–Ω–¥–∞—à' },
          { term: 'pa√≠s', translation: '—Å—Ç—Ä–∞–Ω–∞' },
          { term: 'c√©sped', translation: '–≥–∞–∑–æ–Ω' },
          { term: 'flor', translation: '—Ü–≤–µ—Ç–æ–∫' },
          { term: 'sal', translation: '—Å–æ–ª—å' },
          { term: 'operaci√≥n', translation: '–æ–ø–µ—Ä–∞—Ü–∏—è' },
          { term: 'luz', translation: '—Å–≤–µ—Ç' },
          { term: 'crisis', translation: '–∫—Ä–∏–∑–∏—Å' },
          { term: 'pared', translation: '—Å—Ç–µ–Ω–∞' },
          { term: 'estaci√≥n', translation: '—Å—Ç–∞–Ω—Ü–∏—è' },
          { term: 'ciudad', translation: '–≥–æ—Ä–æ–¥' },
          { term: 'cuesti√≥n', translation: '–≤–æ–ø—Ä–æ—Å' },
          { term: 'verdad', translation: '–ø—Ä–∞–≤–¥–∞' },
          { term: 'pensi√≥n', translation: '–ø–µ–Ω—Å–∏—è' },
          { term: 'felicidad', translation: '—Å—á–∞—Å—Ç—å–µ' },
          { term: 'estudiante', translation: '—Å—Ç—É–¥–µ–Ω—Ç/—Å—Ç—É–¥–µ–Ω—Ç–∫–∞' },
          { term: 'cliente', translation: '–∫–ª–∏–µ–Ω—Ç/–∫–ª–∏–µ–Ω—Ç–∫–∞' },
          { term: 'economista', translation: '—ç–∫–æ–Ω–æ–º–∏—Å—Ç' }
        ];
        words.push(...theoryWords);
      }
    }

    return words;
  };

  const handleAddWordsFromLesson = async () => {
    if (isAddingWords) return;

    setIsAddingWords(true);
    setAddWordsMessage('');

    try {
      const words = extractWordsFromLesson();
      console.log('üìö Extracted words from lesson:', words.length);

      // Use the new method to add multiple cards
      const result = await CardService.addCardsFromLesson(words, 'ru-es');

      setWordsAdded(true);
      setAddWordsMessage(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${result.added} —Å–ª–æ–≤${result.skipped > 0 ? `, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${result.skipped} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤` : ''}`);
      
      // Reset after 3 seconds
      setTimeout(() => {
        setWordsAdded(false);
        setAddWordsMessage('');
      }, 3000);

    } catch (error) {
      console.error('Error adding words from lesson:', error);
      setAddWordsMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤');
    } finally {
      setIsAddingWords(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ - —É–±–∏—Ä–∞–µ—Ç –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —É–¥–∞—Ä–µ–Ω–∏—è
  const normalizeText = (text: string): string => {
    if (!text) return '';
    
    return text
      .toLowerCase()
      .trim()
      // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–≤–∫–ª—é—á–∞—è –∏—Å–ø–∞–Ω—Å–∫–∏–µ)
      .replace(/[¬ø¬°?!.,;:()]/g, '')
      // –£–±–∏—Ä–∞–µ–º —É–¥–∞—Ä–µ–Ω–∏—è –∏ –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s+/g, ' ')
      .trim();
  };

  const checkAnswer = (answer: string) => {
    const gameData = getCurrentGameData();
    const currentItem = gameData[currentQuestion];
    
    let correct = false;
    if (currentGame === 'gender') {
      correct = answer === (currentItem as GameItem).answer;
    } else if (currentGame === 'plural') {
      correct = normalizeText(answer) === normalizeText((currentItem as PluralGameItem).plural);
    }
    
    setIsCorrect(correct);
    setShowFeedback(true);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    const newScores = [...scores];
    if (!newScores[currentQuestion]) {
      newScores[currentQuestion] = { correct: 0, total: 0, percentage: 0 };
    }
    
    if (correct) {
      newScores[currentQuestion].correct++;
    }
    newScores[currentQuestion].total++;
    newScores[currentQuestion].percentage = Math.round(
      (newScores[currentQuestion].correct / newScores[currentQuestion].total) * 100
    );
    
    setScores(newScores);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setUserAnswers(prev => ({ ...prev, [currentQuestion]: answer }));
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      nextQuestion();
    }, 2000);
  };

  const resetGame = () => {
    setCurrentGame('gender');
    setCurrentQuestion(0);
    setScores([]);
    setUserAnswers({});
    setShowFeedback(false);
    setIsCorrect(false);
    setGameCompleted(false);
  };

  const renderTheory = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-sm">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
              <BookOpen className="w-5 h-5 text-blue-600" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900">–¢–µ–æ—Ä–∏—è</h2>
          </div>
          
          {/* Add Words Button */}
          <button
            onClick={handleAddWordsFromLesson}
            disabled={isAddingWords}
            className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all transform hover:scale-105 ${
              wordsAdded 
                ? 'bg-green-100 text-green-700 hover:bg-green-200' 
                : 'bg-blue-600 text-white hover:bg-blue-700'
            } disabled:bg-gray-300 disabled:cursor-not-allowed disabled:transform-none`}
          >
            {isAddingWords ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                –î–æ–±–∞–≤–ª—è–µ–º...
              </>
            ) : wordsAdded ? (
              <>
                <CheckCircle className="w-4 h-4" />
                –°–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã
              </>
            ) : (
              <>
                <Download className="w-4 h-4" />
                –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —É—Ä–æ–∫–∞
              </>
            )}
          </button>
        </div>
        
        <div className="prose prose-sm max-w-none">
          <div className="whitespace-pre-wrap text-gray-700 leading-relaxed font-sans">
            {lesson1Content.theory}
          </div>
        </div>
        
        {/* Add Words Message */}
        {addWordsMessage && (
          <div className={`mt-4 p-3 rounded-lg text-sm font-medium ${
            addWordsMessage.includes('‚úÖ') 
              ? 'bg-green-50 text-green-700 border border-green-200' 
              : 'bg-red-50 text-red-700 border border-red-200'
          }`}>
            {addWordsMessage}
          </div>
        )}
      </div>
    </div>
  );

  const renderDialogues = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-sm">
        <div className="flex items-center gap-3 mb-6">
          <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
            <MessageSquare className="w-5 h-5 text-green-600" />
          </div>
          <h2 className="text-xl font-semibold text-gray-900">–î–∏–∞–ª–æ–≥–∏</h2>
        </div>

        {lesson1Content.dialogues && lesson1Content.dialogues.map((dialogue, index) => (
          <div key={index} className="mb-6 last:mb-0">
            <div className="bg-gray-50 rounded-lg p-4 space-y-3">
              {dialogue.es.map((line, lineIndex) => (
                <div key={lineIndex} className="flex items-start gap-4">
                  <div className="flex-1">
                    <div className="text-gray-800 font-medium mb-1">{line}</div>
                    <div className="text-gray-600 text-sm">{dialogue.ru[lineIndex]}</div>
                  </div>
                  <button
                    onClick={() => {
                      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ
                      console.log('Playing audio for:', line);
                    }}
                    className="flex-shrink-0 p-2 text-gray-400 hover:text-blue-600 transition-colors"
                  >
                    <Volume2 className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderGame = () => {
    const gameData = getCurrentGameData();
    const currentItem = gameData[currentQuestion];

    if (!currentItem) return null;

    return (
      <div className="space-y-6">
        <div className="bg-white rounded-xl p-6 shadow-sm">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center">
                <Target className="w-5 h-5 text-orange-600" />
              </div>
              <h2 className="text-xl font-semibold text-gray-900">
                {currentGame === 'gender' && '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–æ–¥'}
                {currentGame === 'plural' && '–û–±—Ä–∞–∑—É–π—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ'}
                {currentGame === 'sort' && '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–æ–¥—É'}
                {currentGame === 'findError' && '–ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É'}
              </h2>
            </div>
            <div className="text-sm text-gray-500">
              –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {gameData.length}
            </div>
          </div>

          <div className="text-center space-y-6">
            {currentGame === 'gender' && (
              <>
                <div className="text-2xl font-bold text-gray-900 mb-4">
                  {(currentItem as GameItem).term}
                </div>
                
                <div className="flex gap-4 justify-center">
                  <button
                    onClick={() => checkAnswer('m')}
                    disabled={showFeedback}
                    className={`px-8 py-4 rounded-lg font-medium text-lg transition-colors ${
                      showFeedback && isCorrect && userAnswers[currentQuestion] === 'm'
                        ? 'bg-green-500 text-white'
                        : showFeedback && !isCorrect && userAnswers[currentQuestion] === 'm'
                        ? 'bg-red-500 text-white'
                        : 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                    }`}
                  >
                    üöπ Masculino
                  </button>
                  <button
                    onClick={() => checkAnswer('f')}
                    disabled={showFeedback}
                    className={`px-8 py-4 rounded-lg font-medium text-lg transition-colors ${
                      showFeedback && isCorrect && userAnswers[currentQuestion] === 'f'
                        ? 'bg-green-500 text-white'
                        : showFeedback && !isCorrect && userAnswers[currentQuestion] === 'f'
                        ? 'bg-red-500 text-white'
                        : 'bg-pink-100 text-pink-700 hover:bg-pink-200'
                    }`}
                  >
                    üö∫ Femenino
                  </button>
                </div>
                
                {showFeedback && (
                  <div className={`mt-6 p-4 rounded-lg ${
                    isCorrect ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'
                  }`}>
                    <div className="font-medium">
                      {isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}
                    </div>
                    <div className="text-sm mt-1">
                      –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <strong>{(currentItem as GameItem).answer === 'm' ? 'Masculino' : 'Femenino'}</strong>
                    </div>
                  </div>
                )}
              </>
            )}

            {currentGame === 'plural' && (
              <>
                <div className="text-2xl font-bold text-gray-900 mb-4">
                  {(currentItem as PluralGameItem).singular}
                </div>
                
                <div className="max-w-md mx-auto">
                  <input
                    type="text"
                    value={userAnswers[currentQuestion] || ''}
                    onChange={(e) => setUserAnswers(prev => ({ ...prev, [currentQuestion]: e.target.value }))}
                    onKeyPress={(e) => e.key === 'Enter' && checkAnswer(userAnswers[currentQuestion] || '')}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É..."
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg text-center text-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    disabled={showFeedback}
                  />
                </div>
                
                <button
                  onClick={() => checkAnswer(userAnswers[currentQuestion] || '')}
                  disabled={showFeedback || !userAnswers[currentQuestion]}
                  className="mt-4 px-6 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:bg-gray-300"
                >
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                </button>
                
                {showFeedback && (
                  <div className={`mt-6 p-4 rounded-lg ${
                    isCorrect ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'
                  }`}>
                    <div className="font-medium">
                      {isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}
                    </div>
                    <div className="text-sm mt-1">
                      –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <strong>{(currentItem as PluralGameItem).plural}</strong>
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderPractice = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-sm">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
              <Trophy className="w-5 h-5 text-green-600" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
          </div>
          <button
            onClick={resetGame}
            className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900 transition-colors"
          >
            <RotateCcw className="w-4 h-4" />
            –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          {['gender', 'plural', 'sort', 'findError'].map((game, index) => {
            const gameData = getCurrentGameData();
            const gameScores = scores.filter((_, i) => Math.floor(i / gameData.length) === index);
            const totalCorrect = gameScores.reduce((sum, score) => sum + score.correct, 0);
            const totalQuestions = gameScores.reduce((sum, score) => sum + score.total, 0);
            const percentage = totalQuestions > 0 ? Math.round((totalCorrect / totalQuestions) * 100) : 0;

            return (
              <div key={game} className="bg-gray-50 rounded-lg p-4 text-center">
                <div className="text-sm text-gray-600 mb-1">
                  {game === 'gender' && '–†–æ–¥'}
                  {game === 'plural' && '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ'}
                  {game === 'sort' && '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞'}
                  {game === 'findError' && '–ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫'}
                </div>
                <div className="text-2xl font-bold text-gray-900">{percentage}%</div>
                <div className="text-xs text-gray-500">{totalCorrect}/{totalQuestions}</div>
              </div>
            );
          })}
        </div>

        {/* Add Words Button after practice completion */}
        <div className="text-center">
          <button
            onClick={handleAddWordsFromLesson}
            disabled={isAddingWords}
            className={`flex items-center gap-2 px-6 py-3 rounded-lg font-medium transition-all transform hover:scale-105 mx-auto ${
              wordsAdded 
                ? 'bg-green-100 text-green-700 hover:bg-green-200' 
                : 'bg-purple-600 text-white hover:bg-purple-700'
            } disabled:bg-gray-300 disabled:cursor-not-allowed disabled:transform-none`}
          >
            {isAddingWords ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                –î–æ–±–∞–≤–ª—è–µ–º...
              </>
            ) : wordsAdded ? (
              <>
                <CheckCircle className="w-4 h-4" />
                –°–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã
              </>
            ) : (
              <>
                <Download className="w-4 h-4" />
                –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —É—Ä–æ–∫–∞
              </>
            )}
          </button>
          
          {/* Add Words Message */}
          {addWordsMessage && (
            <div className={`mt-3 p-3 rounded-lg text-sm font-medium ${
              addWordsMessage.includes('‚úÖ') 
                ? 'bg-green-50 text-green-700 border border-green-200' 
                : 'bg-red-50 text-red-700 border border-red-200'
            }`}>
              {addWordsMessage}
            </div>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={onBack}
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
                –ù–∞–∑–∞–¥
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">{lesson1Content.title}</h1>
                <div className="text-sm text-gray-500">
                  –ü—Ä–æ–≥—Ä–µ—Å—Å: {totalProgress}%
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="max-w-4xl mx-auto px-4 py-6">
        <div className="flex gap-2 mb-8">
          {[
            { id: 'theory', label: '–¢–µ–æ—Ä–∏—è', icon: BookOpen },
            { id: 'dialogues', label: '–î–∏–∞–ª–æ–≥–∏', icon: MessageSquare },
            { id: 'practice', label: '–ü—Ä–∞–∫—Ç–∏–∫–∞', icon: Target }
          ].map(({ id, label, icon: Icon }) => (
            <button
              key={id}
              onClick={() => setActiveSection(id as any)}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors ${
                activeSection === id
                  ? 'bg-blue-600 text-white'
                  : 'bg-white text-gray-600 hover:bg-gray-50'
              }`}
            >
              <Icon className="w-4 h-4" />
              {label}
            </button>
          ))}
        </div>

        {/* Content */}
        {activeSection === 'theory' && renderTheory()}
        {activeSection === 'dialogues' && renderDialogues()}
        {activeSection === 'practice' && (gameCompleted ? renderPractice() : renderGame())}
      </div>
    </div>
  );
};