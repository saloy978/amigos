import { ImageGenerationService, ImageGenerationRequest as NewImageRequest, ImageGenerationResponse as NewImageResponse } from './imageGenerationService';

interface ImageGenerationRequest {
  term: string;
  translation: string;
  language: string;
}

interface ImageGenerationResponse {
  imageUrl: string;
  success: boolean;
  error?: string;
}

export class ImageGeneratorService {
  
  // Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  private static readonly FALLBACK_IMAGES = {
    animals: [
      'https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg?w=400&h=300&fit=crop'
    ],
    food: [
      'https://images.pexels.com/photos/102104/pexels-photo-102104.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/102104/pexels-photo-102104.jpeg?w=400&h=300&fit=crop'
    ],
    nature: [
      'https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg?w=400&h=300&fit=crop'
    ],
    objects: [
      'https://images.pexels.com/photos/159711/books-bookstore-book-reading-159711.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/159711/books-bookstore-book-reading-159711.jpeg?w=400&h=300&fit=crop'
    ],
    people: [
      'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?w=400&h=300&fit=crop'
    ],
    default: [
      'https://images.pexels.com/photos/1181533/pexels-photo-1181533.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/1181316/pexels-photo-1181316.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/1181354/pexels-photo-1181354.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/1181467/pexels-photo-1181467.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/1181677/pexels-photo-1181677.jpeg?w=400&h=300&fit=crop'
    ]
  };

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –ò–ò
   */
  static async generateImage(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    console.log('üñºÔ∏è ImageGeneratorService: Generating image for:', request);
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –ò–ò
      const newRequest: NewImageRequest = {
        word: request.term,
        language: request.language,
        style: 'cartoon' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å
      };

      const result = await ImageGenerationService.generateImage(newRequest);
      
      if (result.success && result.imageUrl) {
        console.log(`‚úÖ Image generated successfully using ${result.service}`);
        return {
          imageUrl: result.imageUrl,
          success: true
        };
      } else {
        console.warn('‚ö†Ô∏è New image service failed, using fallback');
        return this.getFallbackImage(request);
      }
      
    } catch (error) {
      console.error('‚ùå ImageGeneratorService: Error generating image:', error);
      return this.getFallbackImage(request);
    }
  }

  /**
   * –ü—Ä–æ–±—É–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Unsplash API
   */
  private static async tryUnsplash(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    if (!this.UNSPLASH_ACCESS_KEY || this.UNSPLASH_ACCESS_KEY === 'YOUR_UNSPLASH_ACCESS_KEY') {
      console.log('‚ö†Ô∏è Unsplash API key not configured');
      return { imageUrl: '', success: false, error: 'API key not configured' };
    }

    try {
      const searchQuery = this.buildSearchQuery(request);
      const url = `${this.UNSPLASH_BASE_URL}/search/photos?query=${encodeURIComponent(searchQuery)}&per_page=1&orientation=landscape`;
      
      const response = await fetch(url, {
        headers: {
          'Authorization': `Client-ID ${this.UNSPLASH_ACCESS_KEY}`
        }
      });

      if (!response.ok) {
        throw new Error(`Unsplash API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.results && data.results.length > 0) {
        const image = data.results[0];
        return {
          imageUrl: `${image.urls.regular}?w=400&h=300&fit=crop`,
          success: true
        };
      }

      return { imageUrl: '', success: false, error: 'No images found' };
    } catch (error) {
      console.error('‚ùå Unsplash API error:', error);
      return { imageUrl: '', success: false, error: error.message };
    }
  }

  /**
   * –ü—Ä–æ–±—É–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Pexels API
   */
  private static async tryPexels(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    if (!this.PEXELS_API_KEY || this.PEXELS_API_KEY === 'YOUR_PEXELS_API_KEY') {
      console.log('‚ö†Ô∏è Pexels API key not configured');
      return { imageUrl: '', success: false, error: 'API key not configured' };
    }

    try {
      const searchQuery = this.buildSearchQuery(request);
      const url = `${this.PEXELS_BASE_URL}/search?query=${encodeURIComponent(searchQuery)}&per_page=1&orientation=landscape`;
      
      const response = await fetch(url, {
        headers: {
          'Authorization': this.PEXELS_API_KEY
        }
      });

      if (!response.ok) {
        throw new Error(`Pexels API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.photos && data.photos.length > 0) {
        const photo = data.photos[0];
        return {
          imageUrl: `${photo.src.medium}?w=400&h=300&fit=crop`,
          success: true
        };
      }

      return { imageUrl: '', success: false, error: 'No images found' };
    } catch (error) {
      console.error('‚ùå Pexels API error:', error);
      return { imageUrl: '', success: false, error: error.message };
    }
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è API
   */
  private static buildSearchQuery(request: ImageGenerationRequest): string {
    const { term, translation, language } = request;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–ª–æ–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
    let searchTerm = term;
    
    // –ï—Å–ª–∏ –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ –Ω–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
    if (language !== 'en' && language !== 'english') {
      searchTerm = translation;
    }
    
    // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    searchTerm = searchTerm.toLowerCase()
      .replace(/[^\w\s]/g, '') // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
      .replace(/\s+/g, ' ')    // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
      .trim();
    
    console.log('üîç Search query built:', searchTerm);
    return searchTerm;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–≤–∞
   */
  private static getFallbackImage(request: ImageGenerationRequest): ImageGenerationResponse {
    const category = this.categorizeWord(request.term, request.translation);
    const images = this.FALLBACK_IMAGES[category] || this.FALLBACK_IMAGES.default;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const randomIndex = Math.floor(Math.random() * images.length);
    const imageUrl = images[randomIndex];
    
    console.log('üé≤ Using fallback image for category:', category);
    
    return {
      imageUrl,
      success: true
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private static categorizeWord(term: string, translation: string): keyof typeof ImageGeneratorService.FALLBACK_IMAGES {
    const word = (term + ' ' + translation).toLowerCase();
    
    // –ñ–∏–≤–æ—Ç–Ω—ã–µ
    if (this.matchesCategory(word, ['dog', 'cat', 'bird', 'fish', 'horse', 'cow', 'pig', 'sheep', 'rabbit', 'mouse', '—Å–æ–±–∞–∫–∞', '–∫–æ—Ç', '–ø—Ç–∏—Ü–∞', '—Ä—ã–±–∞', '–ª–æ—à–∞–¥—å', '–∫–æ—Ä–æ–≤–∞', '—Å–≤–∏–Ω—å—è', '–æ–≤—Ü–∞', '–∫—Ä–æ–ª–∏–∫', '–º—ã—à—å'])) {
      return 'animals';
    }
    
    // –ï–¥–∞
    if (this.matchesCategory(word, ['apple', 'banana', 'orange', 'bread', 'milk', 'coffee', 'tea', 'water', 'juice', 'cake', 'pizza', 'chicken', 'rice', 'pasta', '—è–±–ª–æ–∫–æ', '–±–∞–Ω–∞–Ω', '–∞–ø–µ–ª—å—Å–∏–Ω', '—Ö–ª–µ–±', '–º–æ–ª–æ–∫–æ', '–∫–æ—Ñ–µ', '—á–∞–π', '–≤–æ–¥–∞', '—Å–æ–∫', '—Ç–æ—Ä—Ç', '–ø–∏—Ü—Ü–∞', '–∫—É—Ä–∏—Ü–∞', '—Ä–∏—Å', '–ø–∞—Å—Ç–∞'])) {
      return 'food';
    }
    
    // –ü—Ä–∏—Ä–æ–¥–∞
    if (this.matchesCategory(word, ['sun', 'moon', 'star', 'cloud', 'rain', 'snow', 'wind', 'tree', 'flower', 'grass', 'mountain', 'river', 'sea', 'beach', 'forest', '—Å–æ–ª–Ω—Ü–µ', '–ª—É–Ω–∞', '–∑–≤–µ–∑–¥–∞', '–æ–±–ª–∞–∫–æ', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–≤–µ—Ç–µ—Ä', '–¥–µ—Ä–µ–≤–æ', '—Ü–≤–µ—Ç–æ–∫', '—Ç—Ä–∞–≤–∞', '–≥–æ—Ä–∞', '—Ä–µ–∫–∞', '–º–æ—Ä–µ', '–ø–ª—è–∂', '–ª–µ—Å'])) {
      return 'nature';
    }
    
    // –õ—é–¥–∏
    if (this.matchesCategory(word, ['mother', 'father', 'sister', 'brother', 'grandmother', 'grandfather', 'baby', 'child', 'man', 'woman', 'teacher', 'doctor', 'nurse', 'police', 'cook', 'driver', 'farmer', 'artist', '–º–∞–º–∞', '–ø–∞–ø–∞', '—Å–µ—Å—Ç—Ä–∞', '–±—Ä–∞—Ç', '–±–∞–±—É—à–∫–∞', '–¥–µ–¥—É—à–∫–∞', '–º–∞–ª—ã—à', '—Ä–µ–±—ë–Ω–æ–∫', '–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '—É—á–∏—Ç–µ–ª—å', '–≤—Ä–∞—á', '–º–µ–¥—Å–µ—Å—Ç—Ä–∞', '–ø–æ–ª–∏—Ü–∏—è', '–ø–æ–≤–∞—Ä', '–≤–æ–¥–∏—Ç–µ–ª—å', '—Ñ–µ—Ä–º–µ—Ä', '—Ö—É–¥–æ–∂–Ω–∏–∫'])) {
      return 'people';
    }
    
    // –ü—Ä–µ–¥–º–µ—Ç—ã
    if (this.matchesCategory(word, ['house', 'room', 'kitchen', 'bedroom', 'bathroom', 'table', 'chair', 'bed', 'sofa', 'window', 'door', 'wall', 'floor', 'ceiling', 'lamp', 'shirt', 'pants', 'dress', 'shoes', 'hat', 'coat', 'jacket', 'socks', 'gloves', 'scarf', 'car', 'bus', 'train', 'plane', 'bike', 'boat', 'taxi', 'truck', '–¥–æ–º', '–∫–æ–º–Ω–∞—Ç–∞', '–∫—É—Ö–Ω—è', '—Å–ø–∞–ª—å–Ω—è', '–≤–∞–Ω–Ω–∞—è', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å', '–¥–∏–≤–∞–Ω', '–æ–∫–Ω–æ', '–¥–≤–µ—Ä—å', '—Å—Ç–µ–Ω–∞', '–ø–æ–ª', '–ø–æ—Ç–æ–ª–æ–∫', '–ª–∞–º–ø–∞', '—Ä—É–±–∞—à–∫–∞', '–±—Ä—é–∫–∏', '–ø–ª–∞—Ç—å–µ', '—Ç—É—Ñ–ª–∏', '—à–ª—è–ø–∞', '–ø–∞–ª—å—Ç–æ', '–∫—É—Ä—Ç–∫–∞', '–Ω–æ—Å–∫–∏', '–ø–µ—Ä—á–∞—Ç–∫–∏', '—à–∞—Ä—Ñ', '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–±—É—Å', '–ø–æ–µ–∑–¥', '—Å–∞–º–æ–ª—ë—Ç', '–≤–µ–ª–æ—Å–∏–ø–µ–¥', '–ª–æ–¥–∫–∞', '—Ç–∞–∫—Å–∏', '–≥—Ä—É–∑–æ–≤–∏–∫'])) {
      return 'objects';
    }
    
    return 'default';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–ª–æ–≤–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private static matchesCategory(word: string, keywords: string[]): boolean {
    return keywords.some(keyword => word.includes(keyword));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Å–ª–æ–≤
   */
  static async generateImagesForWords(words: Array<{ term: string; translation: string; language: string }>): Promise<Array<{ term: string; translation: string; imageUrl: string }>> {
    console.log('üñºÔ∏è Generating images for', words.length, 'words');
    
    const results = await Promise.allSettled(
      words.map(async (word) => {
        const imageResult = await this.generateImage({
          term: word.term,
          translation: word.translation,
          language: word.language
        });
        
        return {
          term: word.term,
          translation: word.translation,
          imageUrl: imageResult.imageUrl
        };
      })
    );
    
    return results
      .filter((result): result is PromiseFulfilledResult<{ term: string; translation: string; imageUrl: string }> => 
        result.status === 'fulfilled'
      )
      .map(result => result.value);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π
   */
  static getApiStatus(): { unsplash: boolean; pexels: boolean } {
    return {
      unsplash: !!(this.UNSPLASH_ACCESS_KEY && this.UNSPLASH_ACCESS_KEY !== 'YOUR_UNSPLASH_ACCESS_KEY'),
      pexels: !!(this.PEXELS_API_KEY && this.PEXELS_API_KEY !== 'YOUR_PEXELS_API_KEY')
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ API –∫–ª—é—á–µ–π
   */
  static getSetupInstructions(): string {
    return `
–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥ —Å–ª–æ–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏:

1. Unsplash API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
   - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://unsplash.com/developers
   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Access Key
   - –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_UNSPLASH_ACCESS_KEY –≤ –∫–æ–¥–µ

2. Pexels API (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞):
   - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://www.pexels.com/api/
   - –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á
   - –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PEXELS_API_KEY –≤ –∫–æ–¥–µ

3. –ë–µ–∑ API –∫–ª—é—á–µ–π —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    `;
  }
}
