interface FreeAIRequest {
  userLevel: string;
  languagePair: {
    learning: string;
    known: string;
  };
  topic?: string;
  count: number;
  existingWords: string[];
}

interface FreeAIResponse {
  words: Array<{
    term: string;
    translation: string;
    english: string;
    example: string;
    difficulty: string;
  }>;
  success: boolean;
  error?: string;
  service: string;
}

export enum FreeAIServiceEnum {
  GEMINI = 'gemini',
  HUGGING_FACE = 'huggingface',
  COHERE = 'cohere'
}

import { getApiKey, isServiceEnabled, getServicePriority, getFirstAvailableService } from '../config/apiKeys';

export class FreeAIService {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  private static getApiKey(service: FreeAIServiceEnum): string | null {
    const keyMap = {
      [FreeAIServiceEnum.GEMINI]: 'GEMINI_API_KEY',
      [FreeAIServiceEnum.HUGGING_FACE]: 'HUGGING_FACE_API_KEY',
      [FreeAIServiceEnum.COHERE]: 'COHERE_API_KEY'
    };
    
    return getApiKey(keyMap[service] as any);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  static getServicesStatus(): Record<FreeAIServiceEnum, { configured: boolean; hasKey: boolean }> {
    return {
      [FreeAIServiceEnum.GEMINI]: {
        configured: !!this.getApiKey(FreeAIServiceEnum.GEMINI) && isServiceEnabled('GEMINI'),
        hasKey: !!this.getApiKey(FreeAIServiceEnum.GEMINI)
      },
      [FreeAIServiceEnum.HUGGING_FACE]: {
        configured: !!this.getApiKey(FreeAIServiceEnum.HUGGING_FACE) && isServiceEnabled('HUGGING_FACE'),
        hasKey: !!this.getApiKey(FreeAIServiceEnum.HUGGING_FACE)
      },
      [FreeAIServiceEnum.COHERE]: {
        configured: !!this.getApiKey(FreeAIServiceEnum.COHERE) && isServiceEnabled('COHERE'),
        hasKey: !!this.getApiKey(FreeAIServiceEnum.COHERE)
      },
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
   */
  static getServicesInfo(): Record<FreeAIServiceEnum, { name: string; description: string; free: boolean; url: string }> {
    return {
      [FreeAIServiceEnum.GEMINI]: {
        name: 'Google Gemini',
        description: 'Google Gemini AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤',
        free: true,
        url: 'https://aistudio.google.com/app/apikey'
      },
      [FreeAIServiceEnum.HUGGING_FACE]: {
        name: 'Hugging Face',
        description: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–µ–ª–∏ –ò–ò',
        free: true,
        url: 'https://huggingface.co/inference-api'
      },
      [FreeAIServiceEnum.COHERE]: {
        name: 'Cohere',
        description: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü',
        free: true,
        url: 'https://cohere.ai'
      },
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å
   */
  static async generateWords(request: FreeAIRequest): Promise<FreeAIResponse> {
    console.log('ü§ñ FreeAIService: Starting generation with request:', request);

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    const availableService = this.findAvailableService();
    if (!availableService) {
      return {
        words: [],
        success: false,
        error: '–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤',
        service: 'none'
      };
    }

    try {
      switch (availableService) {
        case FreeAIServiceEnum.GEMINI:
          return await this.generateWithGemini(request);
        case FreeAIServiceEnum.HUGGING_FACE:
          return await this.generateWithHuggingFace(request);
        case FreeAIServiceEnum.COHERE:
          return await this.generateWithCohere(request);
        default:
          throw new Error('Unsupported service');
      }
    } catch (error) {
      console.error('‚ùå FreeAI generation error:', error);
      return {
        words: [],
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI',
        service: availableService
      };
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ä–≤–∏—Å
   */
  private static findAvailableService(): FreeAIServiceEnum | null {
    const priority = getServicePriority();
    console.log('üîç FreeAIService: Service priority order:', priority);
    
    for (const serviceKey of priority) {
      if (serviceKey === 'OPENAI') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ChatGPT, –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      
      const service = this.mapServiceKeyToEnum(serviceKey);
      if (service) {
        const status = this.getServicesStatus()[service];
        console.log(`üîç FreeAIService: Checking ${serviceKey} (${service}):`, status);
        
        if (status.configured) {
          console.log(`‚úÖ FreeAIService: Selected ${serviceKey} (${service}) as primary service`);
          return service;
        }
      }
    }
    
    console.log('‚ùå FreeAIService: No available services found');
    return null;
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ enum
   */
  private static mapServiceKeyToEnum(serviceKey: string): FreeAIServiceEnum | null {
    const mapping = {
      'GEMINI': FreeAIServiceEnum.GEMINI,
      'HUGGING_FACE': FreeAIServiceEnum.HUGGING_FACE,
      'COHERE': FreeAIServiceEnum.COHERE
    };
    
    return mapping[serviceKey as keyof typeof mapping] || null;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google Gemini
   */
  private static async generateWithGemini(request: FreeAIRequest): Promise<FreeAIResponse> {
    console.log('ü§ñ FreeAIService: Starting Gemini generation...');
    const apiKey = this.getApiKey(FreeAIServiceEnum.GEMINI);
    const prompt = this.buildPrompt(request);
    
    console.log('ü§ñ FreeAIService: Gemini API key available:', !!apiKey);
    console.log('ü§ñ FreeAIService: Gemini prompt length:', prompt.length);
    
    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1000,
          }
        })
      });

      if (!response.ok) {
        throw new Error(`Gemini API error: ${response.statusText}`);
      }

      const data = await response.json();
      const words = this.parseGeminiResponse(data, request);
      
      console.log(`‚úÖ FreeAIService: Gemini generated ${words.length} words successfully`);
      
      return {
        words,
        success: true,
        service: FreeAIServiceEnum.GEMINI
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      throw new Error(`Gemini error: ${errorMessage}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Hugging Face (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
   */
  private static async generateWithHuggingFace(request: FreeAIRequest): Promise<FreeAIResponse> {
    const apiKey = this.getApiKey(FreeAIServiceEnum.HUGGING_FACE);
    const prompt = this.buildPrompt(request);
    
    try {
      const response = await fetch('https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          inputs: prompt,
          parameters: {
            max_length: 500,
            temperature: 0.7
          }
        })
      });

      if (!response.ok) {
        throw new Error(`Hugging Face API error: ${response.statusText}`);
      }

      const data = await response.json();
      const words = this.parseHuggingFaceResponse(data, request);
      
      return {
        words,
        success: true,
        service: FreeAIServiceEnum.HUGGING_FACE
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      throw new Error(`Hugging Face error: ${errorMessage}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Cohere (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)
   */
  private static async generateWithCohere(request: FreeAIRequest): Promise<FreeAIResponse> {
    const apiKey = this.getApiKey(FreeAIServiceEnum.COHERE);
    const prompt = this.buildPrompt(request);
    
    try {
      const response = await fetch('https://api.cohere.ai/v1/generate', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'command-light',
          prompt: prompt,
          max_tokens: 500,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        throw new Error(`Cohere API error: ${response.statusText}`);
      }

      const data = await response.json();
      const words = this.parseCohereResponse(data, request);
      
      return {
        words,
        success: true,
        service: FreeAIServiceEnum.COHERE
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      throw new Error(`Cohere error: ${errorMessage}`);
    }
  }



  /**
   * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private static buildPrompt(request: FreeAIRequest): string {
    const { userLevel, languagePair, topic, count, existingWords } = request;
    
    let prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π ${count} —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö.\n\n`;
    prompt += `–Ø–∑—ã–∫–æ–≤–∞—è –ø–∞—Ä–∞: ${languagePair.learning} ‚Üí ${languagePair.known} ‚Üí English\n`;
    prompt += `–£—Ä–æ–≤–µ–Ω—å: ${userLevel}\n\n`;
    
    if (topic) {
      prompt += `–¢–µ–º–∞: ${topic}\n\n`;
    }
    
    if (existingWords.length > 0) {
      prompt += `–ò—Å–∫–ª—é—á–∏ —ç—Ç–∏ —Å–ª–æ–≤–∞: ${existingWords.join(', ')}\n\n`;
    }
    
    prompt += `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n`;
    prompt += `- –°–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω—é ${userLevel}\n`;
    prompt += `- –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö: ${languagePair.learning} ‚Üí ${languagePair.known} ‚Üí English\n`;
    prompt += `- –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ ${languagePair.learning}\n`;
    prompt += `- –£–∫–∞–∂–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (A1, A2, B1, B2, C1, C2)\n`;
    prompt += `- –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n`;
    
    if (topic) {
      prompt += `–§–æ–∫—É—Å –Ω–∞ —Ç–µ–º–µ: ${topic}\n\n`;
    }
    
    prompt += `–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n`;
    prompt += `[\n`;
    prompt += `  {\n`;
    prompt += `    "term": "—Å–ª–æ–≤–æ –Ω–∞ ${languagePair.learning}",\n`;
    prompt += `    "translation": "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ ${languagePair.known}",\n`;
    prompt += `    "english": "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",\n`;
    prompt += `    "example": "–ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ ${languagePair.learning}",\n`;
    prompt += `    "difficulty": "—É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"\n`;
    prompt += `  }\n`;
    prompt += `]\n\n`;
    prompt += `–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    return prompt;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Hugging Face
   */
  private static parseHuggingFaceResponse(data: any, request: FreeAIRequest): Array<{
    term: string;
    translation: string;
    english: string;
    example: string;
    difficulty: string;
  }> {
    // Hugging Face –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –Ω—É–∂–Ω–æ –µ–≥–æ –ø–∞—Ä—Å–∏—Ç—å
    const text = data[0]?.generated_text || '';
    return this.parseTextResponse(text, request);
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini
   */
  private static parseGeminiResponse(data: any, request: FreeAIRequest): Array<{
    term: string;
    translation: string;
    english: string;
    example: string;
    difficulty: string;
  }> {
    const text = data.candidates?.[0]?.content?.parts?.[0]?.text || '';
    return this.parseTextResponse(text, request);
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Cohere
   */
  private static parseCohereResponse(data: any, request: FreeAIRequest): Array<{
    term: string;
    translation: string;
    english: string;
    example: string;
    difficulty: string;
  }> {
    const text = data.generations?.[0]?.text || '';
    return this.parseTextResponse(text, request);
  }


  /**
   * –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ JSON
   */
  private static parseTextResponse(text: string, request: FreeAIRequest): Array<{
    term: string;
    translation: string;
    english: string;
    example: string;
    difficulty: string;
  }> {
    try {
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö markdown –±–ª–æ–∫–æ–≤
      let cleanContent = text.trim();
      if (cleanContent.startsWith('```json')) {
        cleanContent = cleanContent.replace(/```json\n?/, '').replace(/```\n?$/, '');
      }
      if (cleanContent.startsWith('```')) {
        cleanContent = cleanContent.replace(/```\n?/, '').replace(/```\n?$/, '');
      }

      const parsed = JSON.parse(cleanContent);
      
      if (!Array.isArray(parsed)) {
        throw new Error('Response is not an array');
      }

      return parsed.map(item => ({
        term: item.term || '',
        translation: item.translation || '',
        english: item.english || '',
        example: item.example || '',
        difficulty: item.difficulty || 'A1'
      }));

    } catch (error) {
      console.error('‚ùå Error parsing AI response:', error);
      console.error('Raw content:', text);
      
      // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      return [];
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É
   */
  static async testConnection(service: FreeAIServiceEnum): Promise<{ success: boolean; error?: string }> {
    const apiKey = this.getApiKey(service);
    if (!apiKey) {
      return {
        success: false,
        error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      };
    }

    try {
      switch (service) {
        case FreeAIServiceEnum.HUGGING_FACE:
          return await this.testHuggingFace(apiKey);
        case FreeAIServiceEnum.COHERE:
          return await this.testCohere(apiKey);
        default:
          return { success: false, error: 'Unsupported service' };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Connection error'
      };
    }
  }

  private static async testHuggingFace(apiKey: string): Promise<{ success: boolean; error?: string }> {
    try {
      const response = await fetch('https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          inputs: 'Hello, test message',
          parameters: { max_length: 10 }
        })
      });

      return { success: response.ok };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      return { success: false, error: errorMessage };
    }
  }

  private static async testCohere(apiKey: string): Promise<{ success: boolean; error?: string }> {
    try {
      const response = await fetch('https://api.cohere.ai/v1/generate', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'command-light',
          prompt: 'Hello, test message',
          max_tokens: 10
        })
      });

      return { success: response.ok };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      return { success: false, error: errorMessage };
    }
  }

}
