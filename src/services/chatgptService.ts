interface ChatGPTRequest {
  userLevel: string;
  languagePair: {
    learning: string;
    known: string;
  };
  topic?: string;
  count: number;
  existingWords: string[];
}

interface ChatGPTResponse {
  words: Array<{
    term: string;
    translation: string;
    english: string;
    example: string;
    difficulty: string;
  }>;
  success: boolean;
  error?: string;
}

import { getApiKey, isServiceEnabled } from '../config/apiKeys';

export class ChatGPTService {
  private static baseUrl = 'https://api.openai.com/v1/chat/completions';

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  private static getApiKey(): string | null {
    return getApiKey('OPENAI_API_KEY');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞
   */
  static getApiStatus(): { configured: boolean; hasKey: boolean } {
    const hasKey = !!this.getApiKey();
    const isEnabled = isServiceEnabled('OPENAI');
    
    return {
      configured: hasKey && isEnabled,
      hasKey: hasKey
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ ChatGPT API
   */
  static async generateWords(request: ChatGPTRequest): Promise<ChatGPTResponse> {
    console.log('ü§ñ ChatGPTService: Starting generation with request:', request);

    const apiKey = this.getApiKey();
    if (!apiKey) {
      console.warn('‚ö†Ô∏è ChatGPT API key not configured');
      return {
        words: [],
        success: false,
        error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      };
    }

    try {
      const prompt = this.buildPrompt(request);
      console.log('üìù Generated prompt:', prompt);

      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤. –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏: term, translation, example, difficulty.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 1000,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå ChatGPT API error:', errorData);
        throw new Error(`API Error: ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      console.log('‚úÖ ChatGPT API response:', data);

      const content = data.choices[0]?.message?.content;
      if (!content) {
        throw new Error('No content received from ChatGPT');
      }

      const words = this.parseResponse(content);
      console.log('üìö Parsed words:', words);

      return {
        words,
        success: true
      };

    } catch (error) {
      console.error('‚ùå ChatGPT generation error:', error);
      return {
        words: [],
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ChatGPT'
      };
    }
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
   */
  private static buildPrompt(request: ChatGPTRequest): string {
    const { userLevel, languagePair, topic, count, existingWords } = request;
    
    let prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π ${count} —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö.\n\n`;
    prompt += `–Ø–∑—ã–∫–æ–≤–∞—è –ø–∞—Ä–∞: ${languagePair.learning} ‚Üí ${languagePair.known} ‚Üí English\n`;
    prompt += `–£—Ä–æ–≤–µ–Ω—å: ${userLevel}\n\n`;
    
    if (topic) {
      prompt += `–¢–µ–º–∞: ${topic}\n\n`;
    }
    
    if (existingWords.length > 0) {
      prompt += `–ò—Å–∫–ª—é—á–∏ —ç—Ç–∏ —Å–ª–æ–≤–∞: ${existingWords.join(', ')}\n\n`;
    }
    
    prompt += `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n`;
    prompt += `- –°–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω—é ${userLevel}\n`;
    prompt += `- –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö: ${languagePair.learning} ‚Üí ${languagePair.known} ‚Üí English\n`;
    prompt += `- –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ ${languagePair.learning}\n`;
    prompt += `- –£–∫–∞–∂–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (A1, A2, B1, B2, C1, C2)\n`;
    prompt += `- –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n`;
    
    if (topic) {
      prompt += `–§–æ–∫—É—Å –Ω–∞ —Ç–µ–º–µ: ${topic}\n\n`;
    }
    
    prompt += `–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n`;
    prompt += `[\n`;
    prompt += `  {\n`;
    prompt += `    "term": "—Å–ª–æ–≤–æ –Ω–∞ ${languagePair.learning}",\n`;
    prompt += `    "translation": "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ ${languagePair.known}",\n`;
    prompt += `    "english": "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",\n`;
    prompt += `    "example": "–ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ ${languagePair.learning}",\n`;
    prompt += `    "difficulty": "—É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"\n`;
    prompt += `  }\n`;
    prompt += `]\n\n`;
    prompt += `–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    return prompt;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
   */
  private static parseResponse(content: string): Array<{
    term: string;
    translation: string;
    english: string;
    example: string;
    difficulty: string;
  }> {
    try {
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö markdown –±–ª–æ–∫–æ–≤
      let cleanContent = content.trim();
      if (cleanContent.startsWith('```json')) {
        cleanContent = cleanContent.replace(/```json\n?/, '').replace(/```\n?$/, '');
      }
      if (cleanContent.startsWith('```')) {
        cleanContent = cleanContent.replace(/```\n?/, '').replace(/```\n?$/, '');
      }

      const parsed = JSON.parse(cleanContent);
      
      if (!Array.isArray(parsed)) {
        throw new Error('Response is not an array');
      }

      return parsed.map(item => ({
        term: item.term || '',
        translation: item.translation || '',
        english: item.english || '',
        example: item.example || '',
        difficulty: item.difficulty || 'A1'
      }));

    } catch (error) {
      console.error('‚ùå Error parsing ChatGPT response:', error);
      console.error('Raw content:', content);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
      const jsonMatch = content.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        try {
          const parsed = JSON.parse(jsonMatch[0]);
          return parsed.map(item => ({
            term: item.term || '',
            translation: item.translation || '',
            example: item.example || '',
            difficulty: item.difficulty || 'A1'
          }));
        } catch (e) {
          console.error('‚ùå Failed to parse extracted JSON:', e);
        }
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT');
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ChatGPT API
   */
  static async testConnection(): Promise<{ success: boolean; error?: string }> {
    const apiKey = this.getApiKey();
    if (!apiKey) {
      return {
        success: false,
        error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      };
    }

    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [
            {
              role: 'user',
              content: 'Hello, test message'
            }
          ],
          max_tokens: 10
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        return {
          success: false,
          error: errorData.error?.message || 'API Error'
        };
      }

      return { success: true };

    } catch (error) {
      return {
        success: false,
        error: error.message || 'Connection error'
      };
    }
  }
}
