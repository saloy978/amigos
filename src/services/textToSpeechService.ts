import { getApiKey, isServiceEnabled } from '../config/apiKeys';

interface TTSRequest {
  text: string;
  languageCode: string;
  voiceName?: string;
  ssmlGender?: 'MALE' | 'FEMALE';
}

interface TTSResponse {
  audioContent: string;
  success: boolean;
  error?: string;
}

export class TextToSpeechService {
  private static baseUrl = 'https://texttospeech.googleapis.com/v1/text:synthesize';

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
   */
  static checkAvailableVoices(): void {
    if ('speechSynthesis' in window) {
      const voices = window.speechSynthesis.getVoices();
      console.log('üîä Available voices on device:');
      voices.forEach(voice => {
        console.log(`  - ${voice.name} (${voice.lang}) - ${voice.gender || 'unknown gender'}`);
      });
      
      const spanishVoices = voices.filter(voice => voice.lang.startsWith('es'));
      console.log('üá™üá∏ Spanish voices:', spanishVoices.map(v => `${v.name} (${v.lang})`));
    } else {
      console.log('‚ùå Speech Synthesis not supported');
    }
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Web Speech API
   */
  static testWebSpeechAPI(): boolean {
    try {
      if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance('Hola');
        utterance.lang = 'es-ES';
        utterance.rate = 0.7;
        utterance.volume = 0.8;
        
        window.speechSynthesis.speak(utterance);
        console.log('üîä Web Speech API test: SUCCESS');
        return true;
      } else {
        console.log('‚ùå Web Speech API not supported');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Web Speech API test failed:', error);
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
   */
  static async testAPI(): Promise<boolean> {
    try {
      console.log('üß™ Testing Google TTS API...');
      
      if (!isServiceEnabled('GOOGLE_TTS')) {
        console.error('‚ùå Google TTS service is not enabled');
        return false;
      }

      const apiKey = getApiKey('GOOGLE_TTS_API_KEY');
      console.log('üîë API Key:', apiKey ? 'Present' : 'Missing');
      if (!apiKey) {
        console.error('‚ùå Google TTS API key is not configured');
        return false;
      }

      const testRequest = {
        input: { text: 'Hola' },
        voice: {
          languageCode: 'es-ES',
          name: 'es-ES-Standard-A',
          ssmlGender: 'FEMALE' as const
        },
        audioConfig: {
          audioEncoding: 'MP3' as const,
          speakingRate: 0.8,
          pitch: 0.0,
          volumeGainDb: 0.0
        }
      };

      console.log('üì§ Test request:', testRequest);

      const response = await fetch(`${this.baseUrl}?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testRequest)
      });

      console.log('üì° Response status:', response.status, response.statusText);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå API Error:', errorData);
        return false;
      }

      const data = await response.json();
      console.log('‚úÖ API Test successful:', data);
      return true;

    } catch (error) {
      console.error('‚ùå API Test failed:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é Google Text-to-Speech API
   */
  static async synthesizeSpeech(request: TTSRequest): Promise<TTSResponse> {
    try {
      console.log('üîä Google TTS: Starting speech synthesis...');
      console.log('Request:', request);

      if (!isServiceEnabled('GOOGLE_TTS')) {
        throw new Error('Google Text-to-Speech service is not enabled');
      }

      const apiKey = getApiKey('GOOGLE_TTS_API_KEY');
      console.log('üîë API Key:', apiKey ? 'Present' : 'Missing');
      if (!apiKey) {
        throw new Error('Google Text-to-Speech API key is not configured');
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
      const defaultVoice = this.getDefaultVoice(request.languageCode);
      const voiceName = request.voiceName || defaultVoice.name;
      const ssmlGender = request.ssmlGender || defaultVoice.gender;

      const requestUrl = `${this.baseUrl}?key=${apiKey}`;
      console.log('üåê Request URL:', requestUrl);
      const response = await fetch(requestUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          input: { text: request.text },
          voice: {
            languageCode: request.languageCode,
            name: voiceName,
            ssmlGender: ssmlGender
          },
          audioConfig: {
            audioEncoding: 'MP3',
            speakingRate: request.languageCode === 'es-ES' ? 0.8 : 0.9, // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ
            pitch: request.languageCode === 'es-ES' ? 0.0 : 0.0, // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–æ–Ω–∞
            volumeGainDb: 0.0
          }
        })
      });

      console.log('üì° Response status:', response.status, response.statusText);
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå API Error:', errorData);
        throw new Error(`Google TTS API error: ${errorData.error?.message || response.statusText}`);
      }

      const data = await response.json();
      
      console.log('‚úÖ Google TTS: Speech synthesis completed');
      
      return {
        audioContent: data.audioContent,
        success: true
      };

    } catch (error) {
      console.error('‚ùå Google TTS: Speech synthesis failed:', error);
      
      return {
        audioContent: '',
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ –∏–∑ base64 —Å—Ç—Ä–æ–∫–∏
   */
  static playAudio(base64Audio: string): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        const audio = new Audio(`data:audio/mp3;base64,${base64Audio}`);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        audio.preload = 'auto';
        audio.volume = 1.0;
        
        audio.onended = () => {
          console.log('üîä Audio playback completed');
          resolve();
        };
        
        audio.onerror = (error) => {
          console.error('‚ùå Audio playback failed:', error);
          reject(error);
        };
        
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∞
        audio.oncanplaythrough = () => {
          console.log('üîä Audio ready to play');
        };
        
        const playPromise = audio.play();
        
        if (playPromise !== undefined) {
          playPromise.then(() => {
            console.log('üîä Audio started playing');
          }).catch((error) => {
            console.error('‚ùå Audio play failed:', error);
            reject(error);
          });
        }
      } catch (error) {
        console.error('‚ùå Audio creation failed:', error);
        reject(error);
      }
    });
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å –∏ —Å—Ä–∞–∑—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç (Google TTS + Web Speech API fallback)
   */
  static async speakText(text: string, languageCode: string): Promise<boolean> {
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    console.log('üì± Device type:', isMobile ? 'Mobile' : 'Desktop');
    
    try {
      const result = await this.synthesizeSpeech({ text, languageCode });
      
      if (result.success && result.audioContent) {
        await this.playAudio(result.audioContent);
        return true;
      } else {
        console.error('‚ùå Google TTS failed, trying Web Speech API:', result.error);
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º Web Speech API
        return this.speakWithWebSpeechAPI(text, languageCode);
      }
    } catch (error) {
      console.error('‚ùå Google TTS error, trying Web Speech API:', error);
      // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º Web Speech API
      return this.speakWithWebSpeechAPI(text, languageCode);
    }
  }

  /**
   * Fallback –º–µ—Ç–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Web Speech API
   */
  private static speakWithWebSpeechAPI(text: string, languageCode: string): boolean {
    try {
      if ('speechSynthesis' in window) {
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        window.speechSynthesis.cancel();
        
        const utterance = new SpeechSynthesisUtterance(text);
        
        // –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏—Å–ø–∞–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
        const voices = window.speechSynthesis.getVoices();
        console.log('üîä Available voices:', voices.map(v => ({ name: v.name, lang: v.lang })));
        
        // –ò—â–µ–º –∏—Å–ø–∞–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        let spanishVoice = voices.find(voice => 
          voice.lang === 'es-ES' || voice.lang === 'es'
        );
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π, –∏—â–µ–º –ª—é–±–æ–π –∏—Å–ø–∞–Ω—Å–∫–∏–π
        if (!spanishVoice) {
          spanishVoice = voices.find(voice => 
            voice.lang.startsWith('es') && 
            (voice.name.includes('Spanish') || voice.name.includes('Espa√±ol') || voice.name.includes('es-'))
          );
        }
        
        if (spanishVoice) {
          utterance.voice = spanishVoice;
          console.log('üîä Using Spanish voice:', spanishVoice.name, spanishVoice.lang);
        } else {
          // –ï—Å–ª–∏ –∏—Å–ø–∞–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
          utterance.lang = 'es-ES';
          console.log('üîä Spanish voice not found, using language code:', utterance.lang);
        }
        
        utterance.rate = 0.7; // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
        utterance.pitch = 1;
        utterance.volume = 0.8;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        utterance.onstart = () => {
          console.log('üîä Web Speech API: Speech started');
        };
        
        utterance.onend = () => {
          console.log('üîä Web Speech API: Speech ended');
        };
        
        utterance.onerror = (event) => {
          console.error('‚ùå Web Speech API error:', event.error);
        };
        
        window.speechSynthesis.speak(utterance);
        console.log('üîä Using Web Speech API fallback');
        return true;
      } else {
        console.error('‚ùå Web Speech API not supported');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Web Speech API error:', error);
      return false;
    }
  }


  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —è–∑—ã–∫–∞
   */
  private static getDefaultVoice(languageCode: string): { name: string; gender: 'MALE' | 'FEMALE' } {
      const voices: Record<string, { name: string; gender: 'MALE' | 'FEMALE' }> = {
      'es-ES': { name: 'es-ES-Standard-A', gender: 'FEMALE' }, // –ò—Å–ø–∞–Ω—Å–∫–∏–π (–ò—Å–ø–∞–Ω–∏—è) - –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
      'es-US': { name: 'es-US-Standard-A', gender: 'FEMALE' }, // –ò—Å–ø–∞–Ω—Å–∫–∏–π (–°–®–ê) - –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
      'ru-RU': { name: 'ru-RU-Standard-A', gender: 'FEMALE' },
      'en-US': { name: 'en-US-Standard-A', gender: 'FEMALE' },
      'en-GB': { name: 'en-GB-Standard-A', gender: 'FEMALE' },
      'fr-FR': { name: 'fr-FR-Standard-A', gender: 'FEMALE' },
      'de-DE': { name: 'de-DE-Standard-A', gender: 'FEMALE' },
      'it-IT': { name: 'it-IT-Standard-A', gender: 'FEMALE' },
      'pt-BR': { name: 'pt-BR-Standard-A', gender: 'FEMALE' },
      'ja-JP': { name: 'ja-JP-Standard-A', gender: 'FEMALE' },
      'ko-KR': { name: 'ko-KR-Standard-A', gender: 'FEMALE' },
      'zh-CN': { name: 'zh-CN-Standard-A', gender: 'FEMALE' }
    };

    return voices[languageCode] || { name: 'en-US-Standard-A', gender: 'FEMALE' };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥ —è–∑—ã–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
   * –í–°–ï–ì–î–ê –ø—Ä–æ–∏–∑–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ (–∏—Å–ø–∞–Ω—Å–∫–∏–π)
   */
  static getLanguageCode(isKnownToLearning: boolean, learningLanguageCode: string = 'es'): string {
    // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏–º –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    switch (learningLanguageCode.toLowerCase()) {
      case 'es':
        return 'es-ES';
      case 'en':
        return 'en-US';
      case 'fr':
        return 'fr-FR';
      case 'de':
        return 'de-DE';
      case 'it':
        return 'it-IT';
      case 'pt':
        return 'pt-BR';
      case 'ja':
        return 'ja-JP';
      case 'ko':
        return 'ko-KR';
      case 'zh':
        return 'zh-CN';
      default:
        return 'es-ES'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–∞–Ω—Å–∫–∏–π
    }
  }
}
