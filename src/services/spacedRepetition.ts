import { Card, CardState, ReviewResult, ReviewDirection, DisplayMode } from '../types';
import { CardDisplayConfigUtils } from '../config/cardDisplayConfig';

export class SpacedRepetitionService {
  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
  private static REVIEW_INTERVALS = [
    { minutes: 1 },      // 1-–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    { minutes: 10 },     // 2-–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç  
    { minutes: 30 },     // 3-–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    { hours: 24 },       // 4-–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    { days: 7 },         // 5-–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    { days: 24 }         // 6-–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
  ];

  static processReview(card: Card, result: ReviewResult): Card {
    const updatedCard = { ...card };
    const now = new Date();

    if (result.correct) {
      // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progressIncrease = CardDisplayConfigUtils.getProgressIncrease();
      updatedCard.progress = Math.min(100, card.progress + progressIncrease);
      updatedCard.successfulReviews += 1;
      updatedCard.reviewCount += 1;
      updatedCard.lastReviewedAt = now;
      updatedCard.updatedAt = now;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É
      const nextInterval = CardDisplayConfigUtils.getNextReviewInterval(updatedCard.successfulReviews);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
      updatedCard.dueAt = this.addInterval(now, nextInterval);
      
      console.log(`‚úÖ SpacedRepetitionService: Card "${updatedCard.term}" correct answer, progress=${updatedCard.progress} (+${progressIncrease}%), successfulReviews=${updatedCard.successfulReviews}, next interval=${JSON.stringify(nextInterval)}, dueAt=${updatedCard.dueAt}`);

    } else {
      // –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progressDecrease = CardDisplayConfigUtils.getProgressDecrease();
      updatedCard.progress = Math.max(0, card.progress - progressDecrease);
      updatedCard.reviewCount += 1;
      updatedCard.lastReviewedAt = now;
      updatedCard.updatedAt = now;

      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ —â–∞–¥—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
      const resetThreshold = CardDisplayConfigUtils.getResetSuccessfulReviewsThreshold();
      if (updatedCard.progress < resetThreshold) {
        updatedCard.successfulReviews = Math.max(0, updatedCard.successfulReviews - 1);
      }
      
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const incorrectAnswerDelay = CardDisplayConfigUtils.getIncorrectAnswerDelay();
      updatedCard.dueAt = new Date(now.getTime() + incorrectAnswerDelay);
      
      console.log(`‚ùå SpacedRepetitionService: Card "${updatedCard.term}" incorrect answer, progress=${updatedCard.progress} (-${progressDecrease}%), successfulReviews=${updatedCard.successfulReviews}, resetThreshold=${resetThreshold}%, delay=${incorrectAnswerDelay}ms, dueAt=${updatedCard.dueAt}`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    updatedCard.state = this.getCardState(updatedCard.progress, updatedCard.dueAt);
    
    return updatedCard;
  }

  static getDisplayMode(card: Card): DisplayMode {
    const progress = card.progress;
    const successfulReviews = card.successfulReviews;
    
    // –†–µ–∂–∏–º—ã –ø–æ–∫–∞–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (progress < 20) {
      return DisplayMode.DEMONSTRATION; // 0-19: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    } else if (progress < 30) {
      return DisplayMode.WORD; // 20-29: –°–ª–æ–≤–æ (–ø–µ—Ä–µ–≤–æ–¥ –ø–æ —Ç–∞–ø—É)
    } else if (progress < 50) {
      // 30-49: —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ "–°–ª–æ–≤–æ" –∏ "–ü–µ—Ä–µ–≤–æ–¥"
      return card.reviewCount % 2 === 0 ? DisplayMode.WORD : DisplayMode.TRANSLATION;
    } else if (progress < 70) {
      // 50-69: —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ "–ü–µ—Ä–µ–≤–æ–¥" –∏ "–ü–µ—Ä–µ–≤–æ–¥ –∫ —Å–ª–æ–≤—É"
      return card.reviewCount % 2 === 0 ? DisplayMode.TRANSLATION : DisplayMode.TRANSLATION_TO_WORD;
    } else {
      // ‚â•70: "–ü–µ—Ä–µ–≤–æ–¥ –∫ —Å–ª–æ–≤—É"
      return DisplayMode.TRANSLATION_TO_WORD;
    }
  }

  static shouldUseInputMode(card: Card): boolean {
    // –í–≤–æ–¥ —Å–ª–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ ‚â•50% (—Ä–µ–∂–∏–º TRANSLATION_TO_WORD)
    return card.progress >= 50;
  }

  static getReviewDirection(card: Card): ReviewDirection {
    const progress = card.progress;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ª—é L‚ÜíK —Å —Ä–æ—Å—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (progress >= 80) {
      // –ü—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ ‚â•80: 50% –ø–æ–∫–∞–∑–æ–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
      return Math.random() < 0.5 ? ReviewDirection.LEARNING_TO_KNOWN : ReviewDirection.KNOWN_TO_LEARNING;
    } else if (progress >= 60) {
      // –ü—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ 60-79: 30% –ø–æ–∫–∞–∑–æ–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
      return Math.random() < 0.3 ? ReviewDirection.LEARNING_TO_KNOWN : ReviewDirection.KNOWN_TO_LEARNING;
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é K‚ÜíL (–∏–∑ "–ó–Ω–∞—é —è–∑—ã–∫" –∫ "–£—á—É —è–∑—ã–∫")
    return ReviewDirection.KNOWN_TO_LEARNING;
  }


  private static addInterval(date: Date, interval: any): Date {
    const newDate = new Date(date);
    
    if (interval.minutes) {
      newDate.setMinutes(newDate.getMinutes() + interval.minutes);
    } else if (interval.hours) {
      newDate.setHours(newDate.getHours() + interval.hours);
    } else if (interval.days) {
      newDate.setDate(newDate.getDate() + interval.days);
    }
    
    return newDate;
  }

  private static getCardState(progress: number, dueAt: Date): CardState {
    const now = new Date();
    
    // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ (dueAt <= now), –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑—É—á–µ–Ω–∞
    if (dueAt <= now) {
      return CardState.LEARN; // –£—á–∏—Ç—å (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏)
    }
    
    // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
    if (progress >= 10 && progress < 70) {
      return CardState.REVIEW; // –ó–Ω–∞—é (–ø—Ä–æ–≥—Ä–µ—Å—Å 10-69%, –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –ø–æ–¥–æ—à–µ–ª)
    }
    
    return CardState.SUSPENDED; // –í—ã—É—á–µ–Ω–æ (–ø—Ä–æ–≥—Ä–µ—Å—Å 70-100%)
  }

  static updateCardStateBasedOnDueTime(card: Card): Card {
    const now = new Date();
    const updatedCard = { ...card };
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    updatedCard.state = this.getCardState(card.progress, card.dueAt);
    
    return updatedCard;
  }

  static getDueCards(cards: Card[]): Card[] {
    const now = new Date();
    console.log('üîç SpacedRepetitionService: getDueCards called with', cards.length, 'cards');
    console.log('üîç SpacedRepetitionService: Current time:', now);
    
    const dueCards = cards
      .filter(card => {
        // –ö–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–∫–∞–∑—É –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ (dueAt <= now)
        const isDue = card.dueAt <= now;
        console.log(`üîç Card "${card.term}": dueAt=${card.dueAt}, progress=${card.progress}, isDue=${isDue}`);
        return isDue;
      })
      .sort((a, b) => a.dueAt.getTime() - b.dueAt.getTime());
    
    console.log('üîç SpacedRepetitionService: Found', dueCards.length, 'due cards');
    return dueCards;
  }

  // Get cards from a lesson in order for first-time learning
  static getLessonCardsInOrder(cards: Card[], lessonId: string): Card[] {
    console.log('üìö SpacedRepetitionService: getLessonCardsInOrder called for lesson:', lessonId);
    
    // Filter cards from the specific lesson that have lesson_order
    const lessonCards = cards.filter(card => 
      (card as any).lessonId === lessonId && 
      (card as any).lessonOrder !== null && 
      (card as any).lessonOrder !== undefined
    );
    
    // Sort by lesson_order
    const orderedCards = lessonCards.sort((a, b) => 
      ((a as any).lessonOrder || 0) - ((b as any).lessonOrder || 0)
    );
    
    console.log(`üìö SpacedRepetitionService: Found ${orderedCards.length} cards for lesson ${lessonId}`);
    return orderedCards;
  }

  // Get next card to show - prioritize lesson order for new lessons, then spaced repetition
  static getNextCardToShow(cards: Card[], currentLessonId?: string): Card | null {
    console.log('üéØ SpacedRepetitionService: getNextCardToShow called');
    
    // If we have a current lesson, check if there are new cards from that lesson
    if (currentLessonId) {
      const lessonCards = this.getLessonCardsInOrder(cards, currentLessonId);
      
      // Find the first card from the lesson that hasn't been reviewed yet (progress = 0)
      const newLessonCard = lessonCards.find(card => card.progress === 0);
      
      if (newLessonCard) {
        console.log('üéØ SpacedRepetitionService: Showing new lesson card:', newLessonCard.term);
        return newLessonCard;
      }
    }
    
    // Otherwise, use the normal spaced repetition logic
    const dueCards = this.getDueCards(cards);
    
    if (dueCards.length > 0) {
      // Sort by due time (earliest first)
      const sortedDueCards = dueCards.sort((a, b) => a.dueAt.getTime() - b.dueAt.getTime());
      console.log('üéØ SpacedRepetitionService: Showing due card:', sortedDueCards[0].term);
      
      // Clear currentLessonId if we're showing non-lesson cards
      const currentLessonId = localStorage.getItem('currentLessonId');
      if (currentLessonId && !(sortedDueCards[0] as any).lessonId) {
        console.log('üéØ SpacedRepetitionService: Showing non-lesson card, clearing currentLessonId');
        localStorage.removeItem('currentLessonId');
      }
      
      return sortedDueCards[0];
    }
    
    console.log('üéØ SpacedRepetitionService: No cards to show');
    return null;
  }

  static getNextDueCard(cards: Card[]): Card | null {
    const now = new Date();
    const futureCards = cards
      .filter(card => card.dueAt > now)
      .sort((a, b) => a.dueAt.getTime() - b.dueAt.getTime());
    
    return futureCards.length > 0 ? futureCards[0] : null;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  static getSupportiveMode(progress: number): DisplayMode {
    if (progress < 20) {
      return DisplayMode.DEMONSTRATION;
    }
    return DisplayMode.WORD;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  static getTimeUntilNext(nextCard: Card | null): string {
    if (!nextCard) return '';
    
    const now = new Date();
    const diff = nextCard.dueAt.getTime() - now.getTime();
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) return `—á–µ—Ä–µ–∑ ${days}–¥`;
    if (hours > 0) return `—á–µ—Ä–µ–∑ ${hours}—á`;
    if (minutes > 0) return `—á–µ—Ä–µ–∑ ${minutes}–º`;
    return '—Å–µ–π—á–∞—Å';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —è–∑—ã–∫–æ–≤–æ–π –ø–∞—Ä–µ
  static checkForDuplicates(cards: Card[], newTerm: string, newTranslation: string, languagePairId: string): Card | null {
    return cards.find(card => 
      card.languagePairId === languagePairId &&
      (card.term.toLowerCase() === newTerm.toLowerCase() || 
       card.translation.toLowerCase() === newTranslation.toLowerCase())
    ) || null;
  }
}