/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Leonardo.ai
 */

import { LeonardoImageGeneratorService, LeonardoImageRequest, LeonardoImageResponse } from './leonardoImageGenerator';

export interface ImageGenerationRequest {
  word: string;
  language: string;
  style?: 'cartoon' | 'realistic' | 'artistic' | 'simple';
  size?: 'small' | 'medium' | 'large';
}

export interface ImageGenerationResponse {
  success: boolean;
  imageUrl?: string;
  error?: string;
  service?: string;
}

export class ImageGenerationService {
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è Leonardo.ai
   */
  static async generateImage(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {
    console.log('üñºÔ∏è ImageGenerationService: Generating image for:', request);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const settings = this.getImageGenerationSettings();
      if (!this.shouldGenerateImage(settings)) {
        console.log('üö´ Image generation disabled by settings');
        return this.getFallbackImage(request);
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Leonardo.ai –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const leonardoRequest: LeonardoImageRequest = {
        word: request.word,
        language: request.language,
        style: request.style || 'cartoon',
        size: request.size || 'medium'
      };

      const result = await LeonardoImageGeneratorService.generateImage(leonardoRequest);
      
      if (result.success && result.imageUrl) {
        console.log(`‚úÖ Image generated successfully using ${result.service}`);
        return {
          success: true,
          imageUrl: result.imageUrl,
          service: result.service
        };
      } else {
        console.warn('‚ö†Ô∏è Leonardo.ai failed, using fallback');
        return this.getFallbackImage(request);
      }
      
    } catch (error) {
      console.error('‚ùå ImageGenerationService: Error generating image:', error);
      return this.getFallbackImage(request);
    }
  }

  /**
   * Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
   */
  private static getFallbackImage(request: ImageGenerationRequest): ImageGenerationResponse {
    const fallbackImages = [
      'https://images.pexels.com/photos/102104/pexels-photo-102104.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/159711/books-bookstore-book-reading-159711.jpeg?w=400&h=300&fit=crop',
      'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?w=200&h=200&fit=crop&crop=face'
    ];
    
    const randomIndex = Math.floor(Math.random() * fallbackImages.length);
    return {
      success: true,
      imageUrl: fallbackImages[randomIndex],
      service: 'Fallback'
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
   */
  static getAvailableStyles(): Array<{value: string, label: string}> {
    return LeonardoImageGeneratorService.getAvailableStyles();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
   */
  static getAvailableServices(): Array<{name: string, description: string, free: boolean}> {
    return [
      LeonardoImageGeneratorService.getServiceInfo(),
      { 
        name: 'Fallback', 
        description: '–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
        free: true 
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ localStorage
   */
  private static getImageGenerationSettings(): {
    style: string;
    enabledServices: string[];
  } | null {
    try {
      const saved = localStorage.getItem('imageGenerationSettings');
      if (saved) {
        return JSON.parse(saved);
      }
    } catch (error) {
      console.warn('Failed to parse image generation settings:', error);
    }
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  private static shouldGenerateImage(settings: {
    style: string;
    enabledServices: string[];
  } | null): boolean {
    if (!settings || !settings.enabledServices) {
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∫–ª—é—á–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    const hasEnabledServices = settings.enabledServices.length > 0;
    
    if (!hasEnabledServices) {
      console.log('üö´ Image generation disabled - no services enabled');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å (–Ω–µ —Ç–æ–ª—å–∫–æ Fallback)
    const hasRealServices = settings.enabledServices.some(service => 
      service !== 'Fallback' && service !== 'Unsplash' && service !== 'Pexels' && service !== 'Pixabay' && service !== 'Craiyon'
    );
    
    if (!hasRealServices) {
      console.log('üö´ Image generation disabled - only fallback services enabled');
      return false;
    }
    
    return true;
  }
}

