interface GeminiRequest {
  userLevel: string;
  languagePair: {
    learning: string;
    known: string;
  };
  topic?: string;
  count: number;
  existingWords: string[];
}

interface GeminiResponse {
  words: Array<{
    term: string;
    translation: string;
    english: string;
    example: string;
    difficulty: string;
  }>;
  success: boolean;
  error?: string;
}

import { getApiKey, isServiceEnabled } from '../config/apiKeys';

export class GeminiService {
  private static baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent';

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  private static getApiKey(): string | null {
    return getApiKey('GEMINI_API_KEY');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
   */
  static isAvailable(): boolean {
    return isServiceEnabled('GEMINI') && !!this.getApiKey();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ Google Gemini API
   */
  static async generateWords(request: GeminiRequest): Promise<GeminiResponse> {
    const apiKey = this.getApiKey();
    
    if (!apiKey) {
      return {
        words: [],
        success: false,
        error: 'Google Gemini API key is not configured'
      };
    }

    try {
      console.log('ü§ñ Gemini: Starting word generation...');
      
      const prompt = this.buildPrompt(request);
      console.log('üìù Gemini: Generated prompt:', prompt);

      const response = await fetch(`${this.baseUrl}?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1000,
          }
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Gemini API error:', errorData);
        throw new Error(`API Error: ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      console.log('üì• Gemini: Raw response:', data);

      const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
      if (!content) {
        throw new Error('No content in response');
      }

      const words = this.parseResponse(content);
      console.log('üìö Gemini: Parsed words:', words);

      return {
        words,
        success: true
      };

    } catch (error) {
      console.error('‚ùå Gemini generation error:', error);
      return {
        words: [],
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google Gemini'
      };
    }
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
   */
  private static buildPrompt(request: GeminiRequest): string {
    const { userLevel, languagePair, topic, count, existingWords } = request;
    
    let prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π ${count} —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö.\n\n`;
    prompt += `–Ø–∑—ã–∫–æ–≤–∞—è –ø–∞—Ä–∞: ${languagePair.learning} ‚Üí ${languagePair.known} ‚Üí English\n`;
    prompt += `–£—Ä–æ–≤–µ–Ω—å: ${userLevel}\n\n`;
    
    if (topic) {
      prompt += `–¢–µ–º–∞: ${topic}\n\n`;
    }
    
    if (existingWords.length > 0) {
      prompt += `–ò—Å–∫–ª—é—á–∏ —ç—Ç–∏ —Å–ª–æ–≤–∞: ${existingWords.join(', ')}\n\n`;
    }
    
    prompt += `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n`;
    prompt += `- –°–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω—é ${userLevel}\n`;
    prompt += `- –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö: ${languagePair.learning} ‚Üí ${languagePair.known} ‚Üí English\n`;
    prompt += `- –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ ${languagePair.learning}\n`;
    prompt += `- –£–∫–∞–∂–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (A1, A2, B1, B2, C1, C2)\n`;
    prompt += `- –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n`;
    
    if (topic) {
      prompt += `–§–æ–∫—É—Å –Ω–∞ —Ç–µ–º–µ: ${topic}\n\n`;
    }
    
    prompt += `–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n`;
    prompt += `[\n`;
    prompt += `  {\n`;
    prompt += `    "term": "—Å–ª–æ–≤–æ –Ω–∞ ${languagePair.learning}",\n`;
    prompt += `    "translation": "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ ${languagePair.known}",\n`;
    prompt += `    "english": "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",\n`;
    prompt += `    "example": "–ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ ${languagePair.learning}",\n`;
    prompt += `    "difficulty": "—É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"\n`;
    prompt += `  }\n`;
    prompt += `]\n\n`;
    prompt += `–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    return prompt;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini
   */
  private static parseResponse(content: string): Array<{
    term: string;
    translation: string;
    english: string;
    example: string;
    difficulty: string;
  }> {
    try {
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö markdown –±–ª–æ–∫–æ–≤
      let cleanContent = content.trim();
      if (cleanContent.startsWith('```json')) {
        cleanContent = cleanContent.replace(/```json\n?/, '').replace(/```\n?$/, '');
      }
      if (cleanContent.startsWith('```')) {
        cleanContent = cleanContent.replace(/```\n?/, '').replace(/```\n?$/, '');
      }

      const parsed = JSON.parse(cleanContent);
      
      if (!Array.isArray(parsed)) {
        throw new Error('Response is not an array');
      }

      return parsed.map(item => ({
        term: item.term || '',
        translation: item.translation || '',
        english: item.english || '',
        example: item.example || '',
        difficulty: item.difficulty || 'A1'
      }));

    } catch (error) {
      console.error('‚ùå Gemini parse error:', error);
      console.error('Raw content:', content);
      throw new Error(`Failed to parse Gemini response: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
   */
  static getServiceInfo(): {name: string, description: string, free: boolean} {
    return {
      name: 'Google Gemini',
      description: 'Google Gemini AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤',
      free: true
    };
  }
}


























