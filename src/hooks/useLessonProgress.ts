import { useState, useEffect, useCallback } from 'react';
import { LessonProgressService } from '../services/lessonProgressService';

export interface LessonProgressState {
  theoryViewed: boolean;
  dialoguesListened: boolean;
  practiceCompleted: boolean;
  practiceScore: number;
  totalProgress: number;
  progressLoaded: boolean;
}

export interface LessonProgressActions {
  markTheoryViewed: () => void;
  markDialoguesListened: () => void;
  markPracticeCompleted: (score: number) => void;
  resetProgress: () => void;
}

export const useLessonProgress = (lessonId: string | undefined) => {
  const [state, setState] = useState<LessonProgressState>({
    theoryViewed: false,
    dialoguesListened: false,
    practiceCompleted: false,
    practiceScore: 0,
    totalProgress: 0,
    progressLoaded: false
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const calculateProgress = useCallback(() => {
    let progress = 0;
    
    // –¢–µ–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞: +20%
    if (state.theoryViewed) progress += 20;
    
    // –î–∏–∞–ª–æ–≥–∏ –ø—Ä–æ—Å–ª—É—à–∞–Ω—ã: +30%
    if (state.dialoguesListened) progress += 30;
    
    // –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: –¥–æ +50% (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É)
    if (state.practiceCompleted) {
      progress += Math.round((state.practiceScore / 100) * 50);
    }
    
    return Math.min(progress, 100);
  }, [state.theoryViewed, state.dialoguesListened, state.practiceCompleted, state.practiceScore]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ Supabase
  const loadProgress = useCallback(async () => {
    if (!lessonId || state.progressLoaded) return;
    
    try {
      console.log('üìä Loading progress from Supabase for lesson:', lessonId);
      const progress = await LessonProgressService.getLessonProgress(lessonId);
      
      if (progress) {
        setState(prev => ({
          ...prev,
          theoryViewed: progress.theory_viewed,
          dialoguesListened: progress.dialogues_listened,
          practiceCompleted: progress.practice_completed,
          practiceScore: progress.practice_score,
          totalProgress: progress.total_progress,
          progressLoaded: true
        }));
        console.log('üìä Loaded progress from Supabase:', progress);
      } else {
        setState(prev => ({ ...prev, progressLoaded: true }));
      }
    } catch (error) {
      console.error('‚ùå Error loading progress from Supabase:', error);
      setState(prev => ({ ...prev, progressLoaded: true }));
    }
  }, [lessonId, state.progressLoaded]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Supabase
  const saveProgress = useCallback(async (updates: Partial<LessonProgressState>) => {
    if (!lessonId || !state.progressLoaded) return;
    
    try {
      const newState = { ...state, ...updates };
      const totalProgress = calculateProgress();
      
      console.log('üíæ Saving progress to Supabase:', { lessonId, updates, totalProgress });
      
      await LessonProgressService.updateLessonProgress(lessonId, {
        theory_viewed: newState.theoryViewed,
        dialogues_listened: newState.dialoguesListened,
        practice_completed: newState.practiceCompleted,
        practice_score: newState.practiceScore,
        total_progress: totalProgress
      });
      
      console.log('‚úÖ Progress saved to Supabase');
    } catch (error) {
      console.error('‚ùå Error saving progress to Supabase:', error);
    }
  }, [lessonId, state, calculateProgress, state.progressLoaded]);

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const actions: LessonProgressActions = {
    markTheoryViewed: useCallback(() => {
      if (state.theoryViewed) return;
      
      console.log('‚úÖ Theory viewed!');
      setState(prev => ({ ...prev, theoryViewed: true }));
      saveProgress({ theoryViewed: true });
    }, [state.theoryViewed, saveProgress]),

    markDialoguesListened: useCallback(() => {
      if (state.dialoguesListened) return;
      
      console.log('üéß Dialogues listened!');
      setState(prev => ({ ...prev, dialoguesListened: true }));
      saveProgress({ dialoguesListened: true });
    }, [state.dialoguesListened, saveProgress]),

    markPracticeCompleted: useCallback((score: number) => {
      console.log('üìù Practice completed with score:', score);
      setState(prev => ({ 
        ...prev, 
        practiceCompleted: true, 
        practiceScore: score 
      }));
      saveProgress({ practiceCompleted: true, practiceScore: score });
    }, [saveProgress]),

    resetProgress: useCallback(() => {
      console.log('üîÑ Resetting progress');
      setState(prev => ({
        ...prev,
        theoryViewed: false,
        dialoguesListened: false,
        practiceCompleted: false,
        practiceScore: 0,
        totalProgress: 0
      }));
      saveProgress({
        theoryViewed: false,
        dialoguesListened: false,
        practiceCompleted: false,
        practiceScore: 0,
        totalProgress: 0
      });
    }, [saveProgress])
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadProgress();
  }, [loadProgress]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    if (state.progressLoaded) {
      const newTotalProgress = calculateProgress();
      if (newTotalProgress !== state.totalProgress) {
        setState(prev => ({ ...prev, totalProgress: newTotalProgress }));
      }
    }
  }, [state.theoryViewed, state.dialoguesListened, state.practiceCompleted, state.practiceScore, state.progressLoaded, calculateProgress, state.totalProgress]);

  return {
    ...state,
    ...actions,
    calculateProgress
  };
};


















